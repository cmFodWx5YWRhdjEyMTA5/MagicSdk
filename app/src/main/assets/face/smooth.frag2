precision mediump float;varying vec2 texture_coordinate;uniform sampler2D rootImageTexture;uniform sampler2D inputImageTexture;varying vec2 texture_coordinate_surround_0;varying vec2 texture_coordinate_surround_1;varying vec2 texture_coordinate_surround_2;varying vec2 texture_coordinate_surround_3;uniform float smooth_strength;uniform float color_strength;uniform float environment_luma_darkest;uniform sampler2D mapping_table_texture;void main(){vec4 average_info = texture2D(inputImageTexture, texture_coordinate);vec4 surround_0 = texture2D(inputImageTexture, texture_coordinate_surround_0);vec4 surround_1 = texture2D(inputImageTexture, texture_coordinate_surround_1);vec4 surround_2 = texture2D(inputImageTexture, texture_coordinate_surround_2);vec4 surround_3 = texture2D(inputImageTexture, texture_coordinate_surround_3);average_info += surround_0 + surround_1 + surround_2 + surround_3;average_info *= 0.2;const float RANGE_ADJUST = 100.0;const float RANGE_ADJUST_SQUARE = RANGE_ADJUST * RANGE_ADJUST;float mean = RANGE_ADJUST * average_info.g;float sqaure_mean = RANGE_ADJUST_SQUARE * average_info.a; float variance = max(0.0001, sqaure_mean - mean * mean);float epsilon = RANGE_ADJUST * smooth_strength;float src_weight = variance / (variance + (epsilon * epsilon));const float base_src_weight = 0.2;src_weight = src_weight + base_src_weight - src_weight * base_src_weight;src_weight = 1.0 - ((1.0 - src_weight) * min(1.0, average_info.g * 2.5));vec4 root_source = texture2D(rootImageTexture, texture_coordinate);average_info = mix(average_info, root_source, src_weight);vec3 blend_source = average_info.rgb;vec3 effect_source = average_info.rgb;effect_source = clamp(effect_source * 1.032 - 0.016, 0.0, 1.0);vec3 index = effect_source * vec3(1.0 - 1.0 / 256.0) + vec3(0.5 / 256.0);vec4 color_r = texture2D(mapping_table_texture, vec2(index.r, 0.5));vec4 color_g = texture2D(mapping_table_texture, vec2(index.g, 0.5));vec4 color_b = texture2D(mapping_table_texture, vec2(index.b, 0.5));vec3 color_effect = vec3(color_r.r, color_g.g, color_b.b);color_effect = mix(blend_source, color_effect, min(1.0, color_strength * 1.43));gl_FragColor = vec4(color_effect, 1.0);}